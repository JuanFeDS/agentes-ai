"""
Script para demostrar el uso de embeddings en consultas de lenguaje natural.
Este script muestra c√≥mo convertir consultas a vectores num√©ricos (embeddings)
y c√≥mo estos pueden usarse para encontrar informaci√≥n relevante.
"""
import numpy as np
from numpy.linalg import norm
from dotenv import load_dotenv
from langchain_openai import OpenAIEmbeddings

# Cargar variables de entorno
load_dotenv()

def query_embeddings():
    """
    Demuestra el uso de embeddings para procesar consultas en lenguaje natural.
    """
    # Inicializar el modelo de embeddings
    modelo_embeddings = OpenAIEmbeddings()

    # Lista de oraciones de ejemplo
    oraciones = [
        "Hola!",
        "Hola ¬øC√≥mo est√°s?",
        "Cu√°l es tu nombre?",
        "Mi nombre es John Doe",
        "¬øCu√°l es tu edad?",
        "Tengo 30 a√±os",
        "¬øCu√°l es tu profesi√≥n?",
        "Soy programador",
    ]

    # Crear embeddings para las oraciones
    print("Creando embeddings para las oraciones de ejemplo...")
    embeddings = modelo_embeddings.embed_documents(oraciones)
    print(f"Se crearon {len(embeddings)} embeddings de dimensi√≥n {len(embeddings[0])}")

    # Consulta para buscar informaci√≥n espec√≠fica
    consulta = "Cu√°l es el nombre mencionado en la conversaci√≥n?"
    print(f"\nConsulta: '{consulta}'")

    # Convertir la consulta a embedding
    embedding_consulta = modelo_embeddings.embed_query(consulta)
    print("\nLa consulta se ha convertido a un vector num√©rico (embedding).")
    print(f"Dimensi√≥n del embedding: {len(embedding_consulta)}")

    # Calcular similitudes entre la consulta y todas las oraciones
    print("\nCalculando similitudes...")
    similitudes = [
        np.dot(embedding_consulta, emb) / (norm(embedding_consulta) * norm(emb))
        for emb in embeddings
    ]

    # Encontrar el √≠ndice del m√°s similar
    indice = np.argmax(similitudes)
    texto_mas_cercano = oraciones[indice]
    similitud = similitudes[indice]

    # Mostrar resultados
    print("\n" + "=" * 60)
    print("üìå Resultado de la b√∫squeda por similitud de embedding")
    print("=" * 60)
    print("\nüîç Texto original generador del embedding:")
    print(f"   '{consulta}'\n")

    print("üìù Texto m√°s cercano encontrado en la base de conocimiento:")
    print(f"   '{texto_mas_cercano}'\n")

    print(f"üìä Nivel de similitud: {similitud:.2%}")

    # Interpretaci√≥n de la similitud
    if similitud > 0.9:
        print(
            """\n‚úÖ Coincidencia excelente: 
            El texto encontrado es pr√°cticamente equivalente en significado."""
        )
    elif similitud > 0.7:
        print(
            """\nüëç Buena coincidencia: 
            El texto encontrado es muy similar en significado."""
        )
    elif similitud > 0.5:
        print(
            """\nü§î Coincidencia moderada: 
            El texto encontrado tiene cierta relaci√≥n sem√°ntica."""
        )
    else:
        print(
            """\n‚ö†Ô∏è Baja coincidencia: 
            El texto encontrado no es muy similar. 
            Considera ampliar tu base de conocimiento."""
        )

if __name__ == "__main__":
    query_embeddings()
